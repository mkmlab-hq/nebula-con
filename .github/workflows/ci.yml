# GitHub Actions CI/CD Pipeline for NebulaCon
# Enhanced with Python 3.12, modern tooling, and comprehensive testing
# Last updated: 2024-08-16 - Simplified and fixed workflow

name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  quality-check:
    name: "🐍 Python Quality Check (Ruff + MyPy + Security)"
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy bandit safety

      - name: ✨ Lint and Format Check with Ruff
        run: |
          echo "Running Ruff Formatter Check..."
          ruff format --check .
          echo "Running Ruff Linter..."
          ruff check .

      - name: 🔍 Type Check with MyPy
        run: |
          echo "Running MyPy Type Check..."
          mypy . --ignore-missing-imports

      - name: 🛡️ Security Check with Bandit
        run: |
          echo "Running Bandit Security Check..."
          bandit -r . -f json -o bandit-report.json || true

      - name: 🔒 Security Check with Safety
        run: |
          echo "Running Safety Check..."
          safety check --json --output safety-report.json || true

  test:
    name: "🧪 Run Tests"
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build-test:
    name: "🔨 Build & Integration Test"
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Ruff Lint & Format Check
        run: |
          echo "Running Ruff Formatter Check..."
          ruff format --check .
          echo "Running Ruff Linter..."
          ruff check .

      - name: Generate sample.csv
        run: |
          python - <<'PY'
          import os, numpy as np, pandas as pd, datetime as dt
          np.random.seed(42)
          os.makedirs('data/raw', exist_ok=True)
          start=dt.datetime(2024,1,1)
          ts=[start+dt.timedelta(hours=i) for i in range(500)]
          feat_a=np.random.normal(0,1,500).cumsum()/50 + np.sin(np.arange(500)/15)
          feat_b=np.random.gamma(2,1,500)
          feat_c=np.random.uniform(-1,1,500)
          feat_d=np.random.normal(5,2,500)
          feat_e=np.random.beta(2,5,500)
          y=np.where(feat_a+0.3*feat_b+np.random.normal(0,0.5,500)>1.5,'C1',np.where(feat_d>6,'C2','C3'))
          df=pd.DataFrame({'timestamp':ts,'feat_a':feat_a,'feat_b':feat_b,'feat_c':feat_c,'feat_d':feat_d,'feat_e':feat_e,'target':y})
          df.to_csv('data/raw/sample.csv', index=False)
          print('sample.csv generated')
          PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nebula-metrics
          path: data/raw/sample.csv

  docker-build:
    name: "🐳 Docker Build Test"
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t nebula-con:test .

      - name: Test Docker container
        run: |
          docker run --rm nebula-con:test python -c "print('Docker build successful!')" 